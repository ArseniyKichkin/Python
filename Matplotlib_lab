# Эпизод 2

import matplotlib.pyplot as plt
import matplotlib.ticker as ticker

with open("frames.dat.txt", "r") as file:
    lines = file.readlines()
strings = len(lines)
x = []
y = []
x_min = 0
x_max = 0
y_min = 0
y_max = 0
min_x = list()
max_x = list()
min_y = []
max_y = []
rows = 2
cols = 3
for i in range(strings):
    if i % 2 == 0:
        a = [float(y) for y in lines[i].split()]
        x.append(a)
    else:
        b = [float(y) for y in lines[i].split()]
        y.append(b)
for i in x:
    a = min(i)
    min_x.append(a)
    b = max(i)
    max_x.append(b)
x_min = min(min_x)
x_max = max(max_x)
for i in y:
    a = min(i)
    min_y.append(a)
    b = max(i)
    max_y.append(b)
y_min = min(min_y)
y_max = max(max_y)

fig, ax = plt.subplots(nrows=rows, ncols=cols, constrained_layout=True)


# for i in range(strings // 2):
#     ax[i].plot(x[i], y[i])
#     ax[i].set_title('Frame {}'.format(i))
#     ax[i].grid()
#     ax[i].xaxis.set_major_locator(ticker.MultipleLocator(2))
#     ax[i].yaxis.set_major_locator(ticker.MultipleLocator(2))
#     ax[i].set_xlim([x_min, x_max])
#     ax[i].set_ylim([y_min, y_max])


for k in range(rows):
    for j in range(cols):
        if k == 1:
            ax[k][j].plot(x[j + 3], y[j + 3])
        else:
            ax[k][j].plot(x[j], y[j])
        ax[k][j].grid()
        ax[k][j].xaxis.set_major_locator(ticker.MultipleLocator(2))
        ax[k][j].yaxis.set_major_locator(ticker.MultipleLocator(2))
        ax[k][j].set_xlim([x_min, x_max])
        ax[k][j].set_ylim([y_min, y_max])
        if k == 1:
            ax[k][j].set_title("Frame {}".format(j + 3))
        else:
            ax[k][j].set_title("Frame {}".format(j))


# ax[0][0].plot(x[0], y[0])
# ax[0][0].set_title("Frame 1")
# ax[0][0].grid()
# ax[0][1].plot(x[1], y[1])
# ax[0][1].set_title("Frame 2")
# ax[0][2].plot(x[2], y[2])
# ax[0][2].set_title("Frame 3")
# ax[1][0].plot(x[3], y[3])
# ax[1][0].set_title("Frame 4")
# ax[1][1].plot(x[4], y[4])
# ax[1][1].set_title("Frame 5")
# ax[1][2].plot(x[5], y[5])
# ax[1][2].set_title("Frame 6")
fig.suptitle("Evolution of the process", size=10)
plt.show()


# Эпизод 3

import collections
import matplotlib.pyplot as plt

preps1 = collections.defaultdict(dict)
groups1 = collections.defaultdict(dict)
preps = collections.defaultdict(list)
groups = collections.defaultdict(list)
with open("studentstxt.txt", 'r') as file:
    strings = file.read().splitlines()
for x in strings:
    tmp = x.split(";")
    preps[tmp[0]].append(int(tmp[2]))
    groups[tmp[1]].append(int(tmp[2]))
for x in preps.items():
    cnt_preps = collections.Counter(x[1])
    cnt_preps = sorted(cnt_preps.items(), key=lambda e: int(e[0]))
    preps1[x[0]] = dict(cnt_preps)
for x in groups.items():
    cnt_groups = collections.Counter(x[1])
    groups1[x[0]] = cnt_groups

label_preps = list(preps1.keys())
label_groups = sorted(list(groups1.keys()), key=lambda e: int(e))

preps_list = collections.defaultdict(list)
groups_list = collections.defaultdict(list)

fig, ax = plt.subplots()

for x in preps1.items():
    arr = list()
    for i in range(3, 11):
        if i in x[1].keys():
            arr.append(x[1][i])
        else:
            arr.append(0)
    preps_list[x[0]] = arr

for x in groups1.items():
    arr = list()
    for i in range(3, 11):
        if i in x[1].keys():
            arr.append(x[1][i])
        else:
            arr.append(0)
    groups_list[x[0]] = arr

grades_per_groups = []
grades_per_preps = []

groups_list = dict(sorted(groups_list.items(), key=lambda e: int(e[0])))

for i in range(3, 11):
    a = list()
    for x in groups_list.items():
        a.append(x[1][i - 3])
    grades_per_groups.append(a)

for i in range(3, 11):
    a = list()
    for x in preps_list.items():
        a.append(x[1][i - 3])
    grades_per_preps.append(a)
plots = []


def preps():
    for i in range(len(grades_per_preps)):
        if i == 0:
            plots.append(ax.bar(label_preps, grades_per_preps[i], label='{}'.format(i + 3)))
        elif i == 1:
            plots.append(
                ax.bar(label_preps, grades_per_preps[i], bottom=grades_per_preps[i - 1], label='{}'.format(i + 3)))
            grades_per_preps[i] = [a + b for a, b in zip(grades_per_preps[i - 1], grades_per_preps[i])]
        else:
            plots.append(ax.bar(label_preps, grades_per_preps[i],
                                bottom=grades_per_preps[i - 1], label='{}'.format(i + 3)))
            grades_per_preps[i] = [a + b for a, b in zip(grades_per_preps[i - 1], grades_per_preps[i])]
    plt.xlabel("Преподаватели")
    plt.ylabel("Количество оценок")
    plt.title("Распределение оценок по преподавателям")


def groups():
    for i in range(len(grades_per_groups)):
        if i == 0:
            plots.append(ax.bar(label_groups, grades_per_groups[i], label='{}'.format(i + 3)))
        elif i == 1:
            plots.append(
                ax.bar(label_groups, grades_per_groups[i], bottom=grades_per_groups[i - 1], label='{}'.format(i + 3)))
            grades_per_groups[i] = [a + b for a, b in zip(grades_per_groups[i - 1], grades_per_groups[i])]
        else:
            plots.append(ax.bar(label_groups, grades_per_groups[i],
                                bottom=grades_per_groups[i - 1], label='{}'.format(i + 3)))
            grades_per_groups[i] = [a + b for a, b in zip(grades_per_groups[i - 1], grades_per_groups[i])]
    plt.xlabel("Группы")
    plt.ylabel("Количество оценок")
    plt.title("Распределение оценок по группам")


groups()
plt.legend()
plt.show()
